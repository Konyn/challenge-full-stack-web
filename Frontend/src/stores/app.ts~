// Utilities
import type IAuth from "@/interfaces/IAuth";
import type IPaginate from "@/interfaces/IPaginate";
import type { IStudent } from "@/interfaces/IStudent";
import type IUser from "@/interfaces/IUser";
import AdminServices from "@/services/admin/intex";
import Auth from "@/services/auth";
import { defineStore } from "pinia";
import type INotification from "@/interfaces/INotification";

export const useAppStore = defineStore("app", {
  state: () => ({
    search: "",
    user: {} as IUser,
    student: {} as IStudent,
    students: [] as IStudent[],
    paginate: {} as IPaginate,
    errors: null,
    notification: {} as INotification
  }),
  actions: {
    setSearch(search: string) {
      this.search = search;
    },
    setStudent(student: IStudent) {
      this.student = student;
    },
    setErrors() {
      this.errors = null;
    },
    setNotification(message: string,type:string = 'success') {
      this.notification = {
        show: true,
        type,
        message
      };
      setTimeout(() => {
        this.notification = {} as INotification
      },3000)
    },
    async setUser(payload: IAuth) {
      await Auth.login(payload)
        .then((response) => {
          this.user = response.data.data as IUser;
        })
        .catch((error) => {
          this.errors = error.response.data;
        });
    },
    async logout() {
      await Auth.logout()
        .then(() => {
          this.user = {} as IUser;
        })
        .catch((error) => {
          this.errors = error.response.data;
        });
    },
    async studentById(id: string | number) {
      await AdminServices.studentById(id)
        .then((response) => {
          this.student = response.data.data;
        })
        .catch((error) => {
          this.errors = error.response.data;
        });
    },

    async listStudent(
      page: number | null = null,
      perPage: number | null = null
    ) {
      await AdminServices.list(page, perPage)
        .then((response) => {
          this.students = response.data.data;
          // this.paginate = response.data.data.meta;
        })
        .catch((error) => {
          this.errors = error.response.data;
        });
    },
    async deleteStudent(id: number) {
      await AdminServices.delete(id)
        .then((response) => {
          console.log(response)
          this.students = this.students.filter((student) => student.id !== id);
          this.setNotification(response.message)
        })
        .catch((error) => {
          this.errors = error.response.data;
        });
    },
    async updateStudent(payload: IStudent) {
      await AdminServices.update(payload)
        .then((response) => {
          this.student = response.data;
          const index  = this.students.findIndex((student) => student.id === this.student.id);
          if (index !== -1) {
            this.students[index] = this.student;
          }
        })
        .catch((error) => {
          this.errors = error.response;
        });
    },
    async registerStudent(payload: IStudent) {
        try {
          const response = await AdminServices.register(payload);
          this.students.push(response.data.data);
        } catch (error) {
          this.errors = error.response.data.errors.reduce((acc, curr) => {
            acc[curr.field] = curr.message;
            return acc;
          }, {});
          throw error;
        }

    },
  },
  getters: {
    getSearch: (state) => state.search,
    getUser: (state) => state.user,
    getStudent: (state) => state.student,
    getStudents: (state) => state.students,
    getStudentsPaginate: (state) => state.paginate,
    getErrors: (state) => state.errors,
    getNotification: (state) => state.notification,
  },
  persist: {
    key: "token",
    pick: ["user.token"],
  },
});
